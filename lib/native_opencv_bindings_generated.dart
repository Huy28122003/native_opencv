// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/native_opencv.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeOpencvBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeOpencvBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeOpencvBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> opencvVersion() {
    return _opencvVersion();
  }

  late final _opencvVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'opencvVersion');
  late final _opencvVersion =
      _opencvVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void gausianBlur(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _gausianBlur(
      path,
    );
  }

  late final _gausianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gausianBlur');
  late final _gausianBlur =
      _gausianBlurPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void cannyEdgeDetector(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> output,
    double threshold,
    double ratio,
  ) {
    return _cannyEdgeDetector(
      path,
      output,
      threshold,
      ratio,
    );
  }

  late final _cannyEdgeDetectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Float, ffi.Float)>>('cannyEdgeDetector');
  late final _cannyEdgeDetector = _cannyEdgeDetectorPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double, double)>();

  void removeWhiteBg(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> output,
    int threshold,
  ) {
    return _removeWhiteBg(
      path,
      output,
      threshold,
    );
  }

  late final _removeWhiteBgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('removeWhiteBg');
  late final _removeWhiteBg = _removeWhiteBgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void sketch(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> output,
  ) {
    return _sketch(
      path,
      output,
    );
  }

  late final _sketchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sketch');
  late final _sketch = _sketchPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void removeBg(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> output,
  ) {
    return _removeBg(
      path,
      output,
    );
  }

  late final _removeBgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('removeBg');
  late final _removeBg = _removeBgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rough(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> output,
  ) {
    return _rough(
      path,
      output,
    );
  }

  late final _roughPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rough');
  late final _rough = _roughPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void sobelEdgeDetector(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _sobelEdgeDetector(
      path,
    );
  }

  late final _sobelEdgeDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'sobelEdgeDetector');
  late final _sobelEdgeDetector =
      _sobelEdgeDetectorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void cannyEdgeDetectorV2(
    ffi.Pointer<ffi.Char> inputPath,
    ffi.Pointer<ffi.Char> outputPath,
    int gaussianKernelSize,
    double gaussianSigma,
    double cannyLowThresh,
    double cannyHighThresh,
    int edgeR,
    int edgeG,
    int edgeB,
    int edgeA,
    int dilationSize,
  ) {
    return _cannyEdgeDetectorV2(
      inputPath,
      outputPath,
      gaussianKernelSize,
      gaussianSigma,
      cannyLowThresh,
      cannyHighThresh,
      edgeR,
      edgeG,
      edgeB,
      edgeA,
      dilationSize,
    );
  }

  late final _cannyEdgeDetectorV2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('cannyEdgeDetectorV2');
  late final _cannyEdgeDetectorV2 = _cannyEdgeDetectorV2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, double,
          double, double, int, int, int, int, int)>();
}
